// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String? // for Credentials auth
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[] // NextAuth adapter
  sessions Session[] // NextAuth adapter
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model ShowcaseVideo {
  id          Int      @id @default(autoincrement())
  team        String
  season      String
  date        DateTime
  videoSrc    String // This field stores the URL/path of the video file
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WelcomeContent {
  id              Int      @id @default(autoincrement())
  title           String // Main title for the Welcome section
  subtitle        String
  contentTitle    String // Markdown content for the Welcome section
  contentSubtitle String
  imageSrc        String // URL to the welcome image stored in a cloud service
  imageTitle      String   @default("") // title/caption for the image
  updatedAt       DateTime @updatedAt
}

// About page hero (singleton)
model AboutHero {
  id       Int     @id @default(1) // singleton row
  fullName String
  nickname String? // e.g. "El Chuy" Vera
  headline String? // short, 1â€“2 sentences
  summary  String? @db.Text // longer paragraph

  images AboutHeroImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AboutHeroImage {
  id          Int    @id @default(autoincrement())
  aboutHeroId Int
  order       Int // 0,1,2 ... controls the 3-column order
  src         String // e.g. "/pic/chuyVeraDallasCup.jpg"
  alt         String

  aboutHero AboutHero @relation(fields: [aboutHeroId], references: [id], onDelete: Cascade)

  @@index([aboutHeroId, order])
}

// Reusable story entries under the About page
model AboutStory {
  id        Int     @id @default(autoincrement())
  slug      String  @unique // for targeted edits and future routes
  title     String
  subtitle  String?
  body      String  @db.Text // markdown or plain text
  order     Int     @default(0)
  published Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([order])
}
